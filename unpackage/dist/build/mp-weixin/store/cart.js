"use strict";const t=require("../common/vendor.js"),o={namespaced:!0,state:()=>({cart:JSON.parse(t.index.getStorageSync("cart")||"[]")}),getters:{total:t=>t.cart.length,allCount:t=>t.cart.reduce(((t,o)=>t+o.goods_count),0),checkedCount:t=>t.cart.filter((t=>t.goods_state)).reduce(((t,o)=>t+o.goods_count),0),checkedGoodsAmount:t=>t.cart.filter((t=>t.goods_state)).reduce(((t,o)=>t+o.goods_count*o.goods_price),0).toFixed(2)},mutations:{addToCart(t,o){const e=t.cart.find((t=>t.goods_id===o.goods_id));e?e.goods_count++:t.cart.push(o),this.commit("m_cart/saveToStorage")},saveToStorage(o){t.index.setStorageSync("cart",JSON.stringify(o.cart))},updateGoodsState(t,o){const e=t.cart.find((t=>t.goods_id===o.goods_id));e&&(e.goods_state=o.goods_state,this.commit("m_cart/saveToStorage"))},updateGoodsCount(t,o){const e=t.cart.find((t=>t.goods_id===o.goods_id));e&&(e.goods_count=o.goods_count,this.commit("m_cart/saveToStorage"))},deleteCartGoods(t,o){t.cart=t.cart.filter((t=>t.goods_id!==o)),this.commit("m_cart/saveToStorage")},updateAllGoodsState(t,o){t.cart.forEach((t=>t.goods_state=o)),this.commit("m_cart/saveToStorage")}}};exports.moduleCart=o;
//# sourceMappingURL=cart.js.map
